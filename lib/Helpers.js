// Generated by CoffeeScript 1.6.3
(function() {
  var FSRootPath, Helpers, escape, os, path;

  escape = require('escape-regexp');

  path = require('path');

  os = require('os');

  FSRootPath = os.platform() === 'win32' ? process.cwd().split(path.sep)[0] + path.sep : '/';

  Helpers = (function() {
    function Helpers() {}

    Helpers.ASTERISK_PATTERN = '<[0-9a-zA-Z/.-_ ]+>';

    Helpers.parseDirectory = function(_path) {
      var asterisk, mask, regexp, splitter;
      mask = null;
      asterisk = _path.indexOf('*');
      regexp = _path.indexOf('<');
      if (asterisk !== -1 || regexp !== -1) {
        if (asterisk === -1 || (asterisk !== -1 && regexp !== -1 && asterisk > regexp)) {
          splitter = regexp;
        } else if (regexp === -1 || (regexp !== -1 && asterisk !== -1 && asterisk <= regexp)) {
          splitter = asterisk;
        }
        mask = _path.substr(splitter);
        _path = _path.substr(0, splitter);
      }
      return {
        directory: _path,
        mask: mask
      };
    };

    Helpers.normalizePattern = function(pattern) {
      var i, part, parts, partsResult, replacement, _i, _len;
      if (pattern === null) {
        return null;
      }
      if (pattern === '*') {
        return null;
      }
      pattern = pattern.replace(/\*/g, Helpers.ASTERISK_PATTERN);
      parts = pattern.match(/<((?!(<|>)).)*>/g);
      if (parts !== null) {
        partsResult = {};
        for (i = _i = 0, _len = parts.length; _i < _len; i = ++_i) {
          part = parts[i];
          partsResult['__<<' + i + '>>__'] = part.replace(/^<(.*)>$/, '$1');
          pattern = pattern.replace(part, '__<<' + i + '>>__');
        }
        pattern = escape(pattern);
        for (replacement in partsResult) {
          part = partsResult[replacement];
          pattern = pattern.replace(replacement, part);
        }
      } else {
        pattern = escape(pattern);
      }
      return pattern;
    };

    Helpers.expandPath = function(_path, isFile) {
      var current, result;
      if (isFile == null) {
        isFile = false;
      }
      if (isFile) {
        _path = path.dirname(_path);
      }
      current = _path;
      result = [current];
      while (current !== FSRootPath) {
        result.push(path.dirname(current));
        current = path.dirname(current);
      }
      return result;
    };

    return Helpers;

  })();

  module.exports = Helpers;

}).call(this);
